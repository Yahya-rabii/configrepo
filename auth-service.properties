# Global configurations shared by both dev and prod environments

spring.application.name=${SPRING_APPLICATION_NAME:auth-service}
server.port=${SERVER_PORT:8081}
spring.datasource.driverClassName=${SPRING_DATASOURCE_DRIVER_CLASS_NAME:org.h2.Driver}
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:h2:mem:authdb}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:admin}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:admin}
spring.jpa.database-platform=${SPRING_JPA_DATABASE_PLATFORM:org.hibernate.dialect.H2Dialect}

# setup local h2 database console
spring.h2.console.enabled=${SPRING_H2_CONSOLE_ENABLED:true}
spring.h2.console.path=${SPRING_H2_CONSOLE_PATH:/h2-console}
spring.h2.console.settings.web-allow-others=${SPRING_H2_CONSOLE_SETTINGS_WEB_ALLOW_OTHERS:false}

# setup discovery server
spring.cloud.discovery.enabled=${SPRING_CLOUD_DISCOVERY_ENABLED:true}
eureka.client.registryFetchIntervalSeconds=${EUREKA_CLIENT_REGISTRY_FETCH_INTERVAL_SECONDS:5}
eureka.client.registerWithEureka=${EUREKA_CLIENT_REGISTER_WITH_EUREKA:true}
eureka.client.fetchRegistry=${EUREKA_CLIENT_FETCH_REGISTRY:true}
eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE:http://localhost:8761/eureka/}
eureka.instance.hostname=${EUREKA_INSTANCE_HOSTNAME:localhost}

# configure actuator endpoints
management.endpoints.web.exposure.include=${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:*}
management.endpoint.health.show-details=${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS:always}

# logging
logging.file.path=${LOGGING_FILE_PATH:C:/Users/yahyarb/Desktop/Loggs}

# open API
openapi.service.title=${OPENAPI_SERVICE_TITLE:AUTH-SERVICE doc}
openapi.service.version=${OPENAPI_SERVICE_VERSION:1.0.0}
openapi.service.url=${OPENAPI_SERVICE_URL:http://localhost:8888}
springdoc.api-docs.path=${SPRINGDOC_API_DOCS_PATH:/auth-service/v3/api-docs}
springdoc.swagger-ui.path=${SPRINGDOC_SWAGGER_UI_PATH:/auth-service/swagger-ui.html}

# Keycloak server address
keycloak.auth-server-url=${KEYCLOAK_AUTH_SERVER_URL:http://localhost:8080/admin/realms/${keycloak.realm}/}

# keycloak get roles end point 
keycloak.auth.get.roles.endpoint=${KEYCLOAK_AUTH_GET_ROLES_ENDPOINT:roles}
@@ -45,7 +45,7 @@ keycloak.auth.get.roles.endpoint=${KEYCLOAK_AUTH_GET_ROLES_ENDPOINT:roles}
keycloak.auth.getorCreate.users.endpoint=${KEYCLOAK_AUTH_GETORCREATE_USERS_ENDPOINT:users}

# Realm
keycloak.realm=${KEYCLOAK_REALM:AppCC-realm}

# Client ID
keycloak.resource=${KEYCLOAK_RESOURCE:AppCC-client}
@@ -54,13 +54,13 @@ keycloak.resource=${KEYCLOAK_RESOURCE:AppCC-client}
keycloak.credentials.secret=${KEYCLOAK_CREDENTIALS_SECRET:2daZvH7aBBVcwI9mvJw3dPQMwWUiZhVK}

# Keycloak access token url
keycloak.token.url=${KEYCLOAK_TOKEN_URL:http://localhost:8080/realms/${keycloak.realm}/protocol/openid-connect/token}

# keycloak logout url http://localhost:8080/auth/realms/<my_realm>/protocol/openid-connect/logout
keycloak.logout.url=${KEYCLOAK_LOGOUT_URL:http://localhost:8080/admin/realms/${keycloak.realm}/users/UserId/logout}

# Keycloak get user roles url
keycloak.user.roles.url=${KEYCLOAK_USER_ROLES_URL:http://localhost:8080/admin/realms/${keycloak.realm}/users/UserId/role-mappings/realm}

# client.service.url via gateway 8888
client.service.url=${CLIENT_SERVICE_URL:http://localhost:8888/client-service}
# create client end point
createClient.endpoint=${CREATECLIENT_ENDPOINT:/createClient}
# get client end point
getclient.Byid.endpoint=${GETCLIENT_BYID_ENDPOINT:/client/}
# update client end point
updateClient.Byid.endpoint=${UPDATECLIENT_BYID_ENDPOINT:/updateClient/}
